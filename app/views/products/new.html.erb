<h1>New Product</h1>
<%= form_for @product do |f| %>
  <%= f.label :name %>
  <%= f.text_field :name %>
  <br />
  <%= f.label :price %>
  <%= f.text_field :price %>
  <br />
  <%= f.label :description %>
  <%= f.text_area :description %>
  <br />
  <%= f.label :inventory %>
  <%= f.text_field :inventory %>
  <div class="actions">
    <%= f.submit "submit" %>
  </div>
<% end %>

<div id="productResult">
  <h2 id="productName"></h2>
  <h3 id="productPrice"></h3>
  <p id="productDescription"></p>
  <p id="productInventory"></p>
</div>

<!-- add an event listener for $('form').submit() to our document ready() -->
<script type="text/javascript" charset="utf-8">
  $(function () {
    $('form').submit(function(event) {
      //Prevent form from submitting the default way, VERY IMPORTANT!
      event.preventDefault();

      //Use jQuery serialize() method, which takes our form data and serializes it for us. 
      var values = $(this).serialize();

      //Use jQuery post(), much like we've been using get() to retrieve data. We pass it the URL and our values.
      var posting = $.post('/products', values);
 
      //Use the posting object to specify what should happen when the AJAX request is done.
      posting.done(function(data) {
      //The jQuery post() method returns a jqXHR object, which implement the Promise interface, used for deferred or asynchronous operations.
        var product = data;
        $("#productName").text(product["name"]);
        $("#productPrice").text(product["price"]);
        $("#productDescription").text(product["description"]);
        $("#productInventory").text(product["inventory"]);
      });
    });
  });